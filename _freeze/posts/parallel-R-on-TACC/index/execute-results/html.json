{
  "hash": "7e5bda2cdff67b2ab93c2ad128102202",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Running R in parallel on the TACC\ndate: '2013-12-20'\ncategories:\n- Rstats\n- programming\n- simulation\n- TACC\ncode-tools: true\n---\n\n\nUPDATE (4/8/2014): I have learned from [Mr. Yaakoub El Khamra](https://www.tacc.utexas.edu/staff/yaakoub-el-khamra) that he and the good folks at TACC have made some modifications to TACC's custom MPI implementation and R build in order to correct bugs in Rmpi and snow that were causing crashes. This post [has been updated](/posts/parallel-R-on-TACC-update) to reflect the modifications.\n\nI've started to use the Texas Advanced Computing Cluster to run statistical simulations in R. It takes a little bit of time to get up and running, but once you do it is an amazing tool. To get started, you'll need\n\n1. An account on the [TACC](https://www.tacc.utexas.edu/) and an allocation of computing time.\n2. An ssh client like [PUTTY](http://www.chiark.greenend.org.uk/~sgtatham/putty/).\n3. Some R code that can be adapted to run in parallel. \n4. A SLURM script that tells the server (called Stampede) how to run the R.\n\n### The R script\n\nI've been running my simulations using a combination of several packages that provide very high-level functionality for parallel computing, namely `foreach`, `doSNOW`, and the `maply` function in `plyr`. All of this runs on top of an `Rmpi` implementation developed by the folks at TACC ([more details here](https://portal.tacc.utexas.edu/documents/13601/901835/Parallel_R_Final.pdf/)). \n\nIn [an earlier post](/posts/Designing-simulation-studies-using-R/), I shared code for running a very simple simulation of the Behrens-Fisher problem. Here's [adapted code](https://gist.github.com/jepusto/8059893) for running the same simulation on Stampede. The main difference is that there are a few extra lines of code to set up a cluster, seed a random number generator, and pass necessary objects (saved in `source_func`) to the nodes of the cluster:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Rmpi)\nlibrary(snow)\nlibrary(foreach)\nlibrary(iterators)\nlibrary(doSNOW)\nlibrary(plyr)\n\n# set up parallel processing\ncluster <- getMPIcluster()\nregisterDoSNOW(cluster)\n\n# export source functions\nclusterExport(cluster, source_func)\n```\n:::\n\n\nOnce it is all set up, running the code is just a matter of turning on the parallel option in `mdply`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBFresults <- mdply(parms, .fun = run_sim, .drop=FALSE, .parallel=TRUE)\n```\n:::\n\n\nI fully admit that my method of passing source functions is rather kludgy. One alternative would be to save all of the source functions in a separate file (say, `source_functions.R`), then `source` the file at the beginning of the simulation script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls())\nsource(\"source_functions.R\")\nprint(source_func <- ls())\n```\n:::\n\n\nAnother, more elegant alternative would be to put all of your source functions in a little package (say, `BehrensFisher`), install the package, and then pass the package in the `maply` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBFresults <- mdply(parms, .fun = run_sim, .drop=FALSE, .parallel=TRUE, .paropts = list(.packages=\"BehrensFisher\"))\n```\n:::\n\n\nOf course, developing a package involves a bit more work on the front end. \n\n### The SLURM script\n\nSuppose that you've got your R code saved in a file called `Behrens_Fisher.R`. Here's an example of a SLURM script that runs the R script after configuring an Rmpi cluster:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n#SBATCH -J Behrens       \t# Job name\n#SBATCH -o Behrens.o%j \t\t# Name of stdout output file (%j expands to jobId)\n#SBATCH -e Behrens.o%j \t\t# Name of stderr output file(%j expands to jobId)\n#SBATCH -n 32         \t\t# Total number of mpi tasks requested\n#SBATCH -p normal     \t\t# Submit to the 'normal' or 'development' queue\n#SBATCH -t 0:20:00 \t  \t    # Run time (hh:mm:ss)\n#SBATCH -A A-yourproject    # Allocation name to charge job against\n#SBATCH --mail-user=you@email.address # specify email address for notifications\n#SBATCH --mail-type=begin   # email when job begins\n#SBATCH --mail-type=end     # email when job ends\n\n# load R module\nmodule load Rstats           \n\n# call R code from RMPISNOW\nibrun RMPISNOW < Behrens_Fisher.R \n```\n:::\n\n\nThe file should be saved in a plain text file called something like `run_BF.slurm`. The file has to use ANSI encoding and Unix-type end-of-line encoding; [Notepad++](http://notepad-plus-plus.org/) is a text editor that can create files in this format. \n\nNote that for full efficiency, the `-n` option should be a multiple of 16 because their are 16 cores per compute node. Further details about SBATCH options can be found [here](https://portal.tacc.utexas.edu/user-guides/stampede#running-slurm-jobcontrol).\n\n\n### Running on Stampede\n\n[Follow these directions](https://portal.tacc.utexas.edu/user-guides/stampede#access) to log in to the Stampede server. Here's the [User Guide](https://portal.tacc.utexas.edu/user-guides/stampede) for Stampede. The first thing you'll need to do is ensure that you've got the proper version of MVAPICH loaded. To do that, type \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmodule swap intel intel/14.0.1.106\nmodule setdefault\n```\n:::\n\n\nThe second line sets this as the default, so you won't need to do this step again.\n\nSecond, you'll need to install whatever R packages you'll need to run your code. To do that, type the following at the `login4$` prompt:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nlogin4$module load Rstats\nlogin4$R\n```\n:::\n\n\nThis will start an interactive R session. From the R prompt, use `install.packages` to download and install, e.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"plyr\",\"reshape\",\"doSNOW\",\"foreach\",\"iterators\")\n```\n:::\n\n\nThe packages will be installed in a local library. Now type `q()` to quit R.\n\nNext, make a new directory for your project:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nlogin4$mkdir project_name\nlogin4$cd project_name\n```\n:::\n\n\nUpload your files to the directory (using [psftp](http://the.earth.li/~sgtatham/putty/0.63/htmldoc/Chapter6.html), for instance). Check that your R script is properly configured by viewing it in Vim. \n\nFinally, submit your job by typing \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nlogin4$sbatch run_BF.slurm\n```\n:::\n\n\nor whatever your SLURM script is called. To check the status of the submitted job, type `showq -u` followed by your TACC user name (more details [here](https://portal.tacc.utexas.edu/user-guides/stampede#running-slurm-jobcontrol-squeue)).\n\n\n### Further thoughts\n\nTACC accounts come with a limited number of computing hours, so you should be careful to write efficient code. Before you even start worrying about running on TACC, you should profile your code and try to find ways to speed up the computations. (Some simple improvements in my Behrens-Fisher code would make it run MUCH faster.) Once you've done what you can in terms of efficiency, you should do some small test runs on Stampede. For example, you could try running only a few iterations for each combination of factors, and/or running only some of the combinations rather than the full factorial design. Based on the run-time for these jobs, you'll then be able to estimate how long the full code would take. If it's acceptable (and within your allocation), then go ahead and `sbatch` the full job. If it's not, you might reconsider the number of factor levels in your design or the number of iterations you need. I might have more comments about those some other time.\n\nComments? Suggestions? Corrections? Drop a comment.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}