{
  "hash": "2ff40dc4b64388b0450d1ba5ac9a7120",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Meta-analysis with robust variance estimation and multiply imputed covariates\nauthors: admin\ndate: '2021-12-22'\ndraft: true\ncategories:\n- meta-analysis\n- robust variance estimation\n- missing data\ncode-fold: true\ncode-tools: true\n\n---\n\n\n$$\n\\def\\Pr{{\\text{Pr}}}\n\\def\\E{{\\text{E}}}\n\\def\\Var{{\\text{Var}}}\n\\def\\Cov{{\\text{Cov}}}\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(metadat)\nlibrary(metafor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nLoading required package: numDeriv\n\nLoading the 'metafor' package (version 4.6-0). For an\nintroduction to the package please type: help(metafor)\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(clubSandwich)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'clubSandwich':\n  method    from    \n  bread.mlm sandwich\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mice)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'mice'\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following objects are masked from 'package:base':\n\n    cbind, rbind\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mitools)\n\n# Create missingness\n\nset.seed(20211222)\n\ndat_miss <- \n  dat.assink2016 %>%\n  group_by(study) %>%\n  mutate(\n    pubstatus = if_else(rbinom(1L, 1L, 0.15) == 1L, NA_integer_, unique(pubstatus)),\n    pubstatus = factor(pubstatus, levels = 0:1, labels = c(\"unpublished\",\"published\")),\n    deltype = if_else(rbinom(n(), 1L, prob = plogis(-2.5 - 0.1 * year)) == 1L, NA_character_, deltype),\n    deltype = factor(deltype)\n  )\n\n# Impute missing values 20 times\n\npredMatrix <- make.predictorMatrix(dat_miss)\npredMatrix[,c(\"study\",\"esid\",\"id\")] <- 0 # don't use study or esid or id for imputing\n\nimpMethod <- make.method(dat_miss)\nimpMethod\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    study      esid        id        yi        vi pubstatus      year   deltype \n       \"\"        \"\"        \"\"        \"\"        \"\"  \"logreg\"        \"\" \"polyreg\" \n```\n\n\n:::\n\n```{.r .cell-code}\nimp <- mice(dat_miss, m = 20, print = FALSE,\n            predictorMatrix = predMatrix, \n            method=impMethod, seed = 20211222)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Number of logged events: 70\n```\n\n\n:::\n\n```{.r .cell-code}\n# Fit SCE+ model\nfits <- with(imp, rma.mv(\n  yi = yi, \n  V = impute_covariance_matrix(vi = vi, cluster = study, r = 0.6, subgroup = deltype),\n  mods = ~ pubstatus + deltype + year,\n  random = list(~ deltype | study, ~ deltype | id),\n  struct = c(\"DIAG\",\"DIAG\")\n))\n\n# Get coefficients\ncoefs <- map(fits$analyses, coef)\n\n# Get CR2 variance-covariance matrices\nvcovs <- map(fits$analyses, vcovCR, type = \"CR2\")\n\n# Get denominator df from complete-data F-tests\nq <- 2\ndfs <- \n  map_dfr(fits$analyses, Wald_test, vcov = \"CR2\", constraints = constrain_zero(3:4), test = \"HTZ\") %>%\n  mutate(\n    eta = df_denom + (q - 1)\n  )\neta <- mean(dfs$eta)\n\n# Combine imputed results\nres <- MIcombine(results = coefs, variances = vcovs)\nres$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           intrcpt pubstatuspublished       deltypeovert      deltypecovert \n        0.89897557        -0.55770641        -0.38101335        -0.46723794 \n              year \n       -0.02576823 \n```\n\n\n:::\n\n```{.r .cell-code}\nres$variance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        intrcpt pubstatuspublished deltypeovert deltypecovert\nintrcpt             0.074539990       -0.083961055 -0.058577509  0.0010494026\npubstatuspublished -0.083961055        0.103264128  0.067143253 -0.0032322645\ndeltypeovert       -0.058577509        0.067143253  0.106429073 -0.0108120063\ndeltypecovert       0.001049403       -0.003232265 -0.010812006  0.0321119131\nyear                0.002758525       -0.004318211 -0.003867039  0.0002642099\n                            year\nintrcpt             0.0027585250\npubstatuspublished -0.0043182112\ndeltypeovert       -0.0038670392\ndeltypecovert       0.0002642099\nyear                0.0004815795\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate manual HTZ test using averaged eta \nCmat <- constrain_zero(3:4, coefs = res$coefficients)\nQ <- t(Cmat %*% res$coefficients) %*% solve(Cmat %*% res$variance %*% t(Cmat)) %*% (Cmat %*% res$coefficients)\nFstat <- (eta - q + 1) / (eta * q) * as.numeric(Q)\np_val <- pf(Fstat, df1 = q, df2 = eta - q + 1, lower.tail = FALSE)\ndata.frame(Fstat = Fstat, df_num = q, df_denom = eta - q + 1, p_val = p_val)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Fstat df_num df_denom     p_val\n1 3.003452      2 1.663534 0.2804675\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}