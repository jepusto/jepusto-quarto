{
  "hash": "9111d3f1c825fdb60d373522b41d14b8",
  "result": {
    "markdown": "---\ntitle: Bug in nlme::lme with fixed sigma and REML estimation\nauthors: admin\ndate: '2016-11-07'\ncategories:\n- Rstats\n- programming\n- hierarchical models\n- nlme\ncode-tools: true\n\n---\n\n\nAbout one year ago, the `nlme` package introduced a feature that allowed the user to specify a fixed value for the residual variance in linear mixed effect models fitted with `lme()`. This feature is interesting to me because, when used with the `varFixed()` specification for the residual weights, it allows for estimation of a wide variety of meta-analysis models, including basic random effects models, bivariate models for estimating effects by trial arm, and other sorts of multivariate/multi-level random effects models. However, in kicking the tires on this feature, I noticed that the results that it produces are not quite consistent with the results produced by `metafor`, which is the main package I use for fitting meta-analytic models. \n\nIn this post, I document several examples of discrepant estimates between `lme()` and `rma.mv()`, using standard datasets included in the `metafor` package. The main take-aways are:\n\n1. The discrepancies arise only with `REML` estimation (not with `ML` estimation). \n2. The discrepancies are present whether or not the `varFixed` specification is used.\n3. The discrepancies are mostly small (with minimal impact on the standard errors of the fixed effect estimates), but are larger than I would expect from computational/convergence differences alone.\n\nAnother example, based on a different dataset, is documented in [this bug report](https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16975). Wolfgang Viechtbauer, author of the `metafor` package, identified this problem with `lme` a few months ago already (see his responses in [this thread](https://stat.ethz.ch/pipermail/r-sig-mixed-models/2016q2/024862.html) on the R mixed models mailing list) and noted that the issue was localized to REML estimation. My thanks to Wolfgang for providing feedback on this post.\n\n### Basic random effects model\n\nThis example fits a basic random effects model to the BCG vaccine data, available within `metafor`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(metafor)\nlibrary(nlme)\n\nbcg_example <- function(method = \"REML\", constant_var = FALSE) {\n  \n  data(dat.bcg)\n  dat <- escalc(measure=\"OR\", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)\n  \n  v_bar <- mean(dat$vi)\n  if (constant_var) dat$vi <- v_bar\n  \n  # random-effects model using rma.uni()\n  LOR_uni_fit <- rma(yi, vi, data=dat, method = method)\n  LOR_uni <- with(LOR_uni_fit, \n                  data.frame(f = \"rma.uni\", \n                             logLik = logLik(LOR_uni_fit),\n                             est = as.numeric(b), \n                             se = se, \n                             tau = sqrt(tau2)))\n  \n  # random-effects model using rma.mv()\n  LOR_mv_fit <- rma.mv(yi, vi, random = ~ 1 | trial, data=dat, method = method)\n  LOR_mv <- with(LOR_mv_fit, \n                 data.frame(f = \"rma.mv\", \n                            logLik = logLik(LOR_mv_fit),\n                            est = as.numeric(b), \n                            se = se, \n                            tau = sqrt(sigma2)))\n  \n  # random-effects model using lme()\n  if (constant_var) {\n    LOR_lme_fit <- lme(yi ~ 1, data = dat, method = method, \n                       random = ~ 1 | trial,\n                       control = lmeControl(sigma = sqrt(v_bar)))\n    tau <- sqrt(as.numeric(coef(LOR_lme_fit$modelStruct$reStruct, unconstrained = FALSE)) * v_bar) \n  } else {\n    LOR_lme_fit <- lme(yi ~ 1, data = dat, method = method, \n                       random = ~ 1 | trial,\n                       weights = varFixed(~ vi),\n                       control = lmeControl(sigma = 1))\n    tau <- sqrt(as.numeric(coef(LOR_lme_fit$modelStruct$reStruct, unconstrained = FALSE)))\n  }\n  LOR_lme <- data.frame(f = \"lme\", \n                        logLik = logLik(LOR_lme_fit),\n                        est = as.numeric(fixef(LOR_lme_fit)), \n                        se = as.numeric(sqrt(vcov(LOR_lme_fit))), \n                        tau = tau)\n  \n  rbind(LOR_uni, LOR_mv, LOR_lme)\n  \n}\n\nbcg_example(\"REML\", constant_var = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        f    logLik        est        se       tau\n1 rma.uni -12.57566 -0.7451778 0.1860279 0.5811816\n2  rma.mv -12.57566 -0.7451778 0.1860280 0.5811818\n3     lme -13.34043 -0.7471979 0.1916902 0.6030524\n```\n:::\n\n```{.r .cell-code}\nbcg_example(\"REML\", constant_var = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        f    logLik        est        se       tau\n1 rma.uni -12.96495 -0.7716272 0.1977007 0.5911451\n2  rma.mv -12.96495 -0.7716272 0.1977007 0.5911452\n3     lme -15.62846 -0.7716272 0.1899448 0.5571060\n```\n:::\n\n```{.r .cell-code}\nbcg_example(\"ML\", constant_var = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        f    logLik        est        se       tau\n1 rma.uni -13.07276 -0.7419668 0.1779534 0.5499605\n2  rma.mv -13.07276 -0.7419669 0.1779534 0.5499608\n3     lme -13.07276 -0.7419668 0.1779534 0.5499605\n```\n:::\n\n```{.r .cell-code}\nbcg_example(\"ML\", constant_var = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        f     logLik        est        se       tau\n1 rma.uni -13.525084 -0.7716272 0.1899447 0.5571059\n2  rma.mv -13.525084 -0.7716272 0.1899447 0.5571059\n3     lme  -2.479133 -0.7716272 0.1899447 0.5571060\n```\n:::\n:::\n\n\n### Bi-variate random effects model\n\nThis example fits a bi-variate random effects model, also to the BCG vaccine data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbcg_bivariate <- function(method = \"REML\", constant_var = FALSE) {\n  data(dat.bcg)\n  dat_long <- to.long(measure=\"OR\", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)\n  levels(dat_long$group) <- c(\"exp\", \"con\")\n  dat_long$group <- relevel(dat_long$group, ref=\"con\")\n  dat_long <- escalc(measure=\"PLO\", xi=out1, mi=out2, data=dat_long)\n\n  v_bar <- mean(dat_long$vi)\n  \n  if (constant_var) dat_long$vi <- v_bar\n  \n  # bivariate random-effects model using rma.mv()\n  \n  bv_rma_fit <- rma.mv(yi, vi, mods = ~ group, \n                       random = ~ group | study, \n                       struct = \"UN\", method = method,\n                       data=dat_long)\n  bv_rma <- with(bv_rma_fit, data.frame(f = \"rma.mv\",\n                                        logLik = logLik(bv_rma_fit),\n                                        tau1 = sqrt(tau2[1]),\n                                        tau2 = sqrt(tau2[2])))\n  \n  # bivariate random-effects model using lme()\n  if (constant_var) {\n    bv_lme_fit <- lme(yi ~ group, data = dat_long, method = method, \n                      random = ~ group | study,\n                      control = lmeControl(sigma = sqrt(v_bar)))\n    tau_sq <- colSums(coef(bv_lme_fit$modelStruct$reStruct, unconstrained = FALSE) * matrix(c(1,0,0, 1,2,1), 3, 2)) * v_bar\n    \n  } else {\n    bv_lme_fit <- lme(yi ~ group, data = dat_long, method = method, \n                      random = ~ group | study,\n                      weights = varFixed(~ vi),\n                      control = lmeControl(sigma = 1))\n    \n    tau_sq <- colSums(coef(bv_lme_fit$modelStruct$reStruct, unconstrained = FALSE) * matrix(c(1,0,0, 1,2,1), 3, 2))\n    \n  }\n  \n  bv_lme <- data.frame(f = \"lme\",\n                       logLik = logLik(bv_lme_fit),\n                       tau1 = sqrt(tau_sq[1]),\n                       tau2 = sqrt(tau_sq[2]))\n  \n  rbind(bv_rma, bv_lme)\n  \n}\n\nbcg_bivariate(\"REML\", constant_var = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f    logLik     tau1     tau2\n1 rma.mv -31.50167 1.244429 1.617808\n2    lme -32.32612 1.254436 1.631619\n```\n:::\n\n```{.r .cell-code}\nbcg_bivariate(\"REML\", constant_var = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f    logLik     tau1     tau2\n1 rma.mv -31.09623 1.191679 1.644897\n2    lme -37.06035 1.142260 1.578434\n```\n:::\n\n```{.r .cell-code}\nbcg_bivariate(\"ML\", constant_var = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f    logLik     tau1     tau2\n1 rma.mv -33.08793 1.196399 1.551558\n2    lme -33.08793 1.196399 1.551558\n```\n:::\n\n```{.r .cell-code}\nbcg_bivariate(\"ML\", constant_var = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f     logLik    tau1     tau2\n1 rma.mv -32.647023 1.14226 1.578434\n2    lme  -2.237355 1.14226 1.578435\n```\n:::\n:::\n\n\n### Three-level random-effects model\n\nThis example fits a three-level random-effects model to the data from Konstantopoulos (2011):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKonstantopoulos <- function(method = \"REML\", constant_var = FALSE) {\n  \n  dat <- get(data(dat.konstantopoulos2011))\n  v_bar <- mean(dat$vi)\n  if (constant_var) dat$vi <- v_bar\n  \n  # multilevel random-effects model using rma.mv()\n  ml_rma_fit <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat, method = method)\n  \n  ml_rma <- with(ml_rma_fit, \n                 data.frame(f = \"rma.mv\", \n                            logLik = logLik(ml_rma_fit),\n                            est = as.numeric(b), \n                            se = se, \n                            tau1 = sqrt(sigma2[1]), \n                            tau2 = sqrt(sigma2[2])))\n  \n  # multilevel random-effects model using lme()\n  if (constant_var) {\n    ml_lme_fit <- lme(yi ~ 1, data = dat, method = method, \n                      random = ~ 1 | district / school,\n                      control = lmeControl(sigma = sqrt(v_bar)))\n    tau <- sqrt(as.numeric(coef(ml_lme_fit$modelStruct$reStruct, unconstrained = FALSE)) * v_bar)\n    \n  } else {\n    ml_lme_fit <- lme(yi ~ 1, data = dat, method = method, \n                      random = ~ 1 | district / school,\n                      weights = varFixed(~ vi),\n                      control = lmeControl(sigma = 1))\n    tau <- sqrt(as.numeric(coef(ml_lme_fit$modelStruct$reStruct, unconstrained = FALSE)))\n    \n  }  \n  ml_lme <- data.frame(f = \"lme\",\n                       logLik = logLik(ml_lme_fit),\n                       est = as.numeric(fixef(ml_lme_fit)),\n                       se = as.numeric(sqrt(diag(vcov(ml_lme_fit)))),\n                       tau1 = tau[2],\n                       tau2 = tau[1])\n  \n  rbind(ml_rma, ml_lme)\n  \n}\n\nKonstantopoulos(\"REML\", constant_var = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f     logLik       est         se      tau1      tau2\n1 rma.mv  -7.958724 0.1847132 0.08455592 0.2550724 0.1809324\n2    lme -10.716781 0.1841827 0.08641374 0.2605790 0.1884588\n```\n:::\n\n```{.r .cell-code}\nKonstantopoulos(\"REML\", constant_var = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f     logLik       est         se      tau1      tau2\n1 rma.mv  -9.724839 0.1724309 0.08052701 0.2401816 0.1878155\n2    lme -16.119274 0.1724309 0.07980479 0.2380275 0.1848778\n```\n:::\n\n```{.r .cell-code}\nKonstantopoulos(\"ML\", constant_var = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f    logLik       est         se      tau1      tau2\n1 rma.mv -8.394936 0.1844554 0.08048168 0.2402881 0.1812865\n2    lme -8.394936 0.1844554 0.08048168 0.2402881 0.1812865\n```\n:::\n\n```{.r .cell-code}\nKonstantopoulos(\"ML\", constant_var = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       f    logLik       est         se      tau1      tau2\n1 rma.mv -10.11095 0.1712365 0.07645094 0.2250687 0.1881229\n2    lme  90.21692 0.1712365 0.07645093 0.2250687 0.1881228\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}