{
  "hash": "9c854ab653e3b9b8b5bfe58e79679be0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Step-function selection models for meta-analysis\n---\n\n::: {.cell}\n\n```{.css .cell-code}\n.slider-container {\n  position: relative;\n  width: 100%;\n  height: 20px;\n  background-color: #ddd;\n}\n\n.slider-track {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  width: 100%;\n  height: 4px;\n  background-color: #333;\n}\n\n.slider-pointer {\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: #0066cc;\n  cursor: pointer;\n}\n\n.result-container {\n  margin-top: 20px;\n  font-size: 16px;\n}\n```\n\n\n<style type=\"text/css\">\n.slider-container {\n  position: relative;\n  width: 100%;\n  height: 20px;\n  background-color: #ddd;\n}\n\n.slider-track {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  width: 100%;\n  height: 4px;\n  background-color: #333;\n}\n\n.slider-pointer {\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: #0066cc;\n  cursor: pointer;\n}\n\n.result-container {\n  margin-top: 20px;\n  font-size: 16px;\n}\n</style>\n:::\n\n::: {.cell}\n\n```{.js .cell-code}\nconst sliderContainer = document.querySelector(\".slider-container\");\nconst sliders = document.querySelectorAll(\".slider-pointer\");\nconst value1 = document.getElementById(\"value1\");\nconst value2 = document.getElementById(\"value2\");\nconst value3 = document.getElementById(\"value3\");\nconst value4 = document.getElementById(\"value4\");\n\nfunction updateValues() {\n  const values = Array.from(sliders).map((slider) => Number(slider.dataset.value));\n  value1.textContent = values[0];\n  value2.textContent = values[1] - values[0];\n  value3.textContent = values[2] - values[1];\n  value4.textContent = 100 - (values[2] - values[1] + values[1] - values[0] + values[0]);\n\n\n}\n\nsliders.forEach((slider) => {\n  slider.addEventListener(\"mousedown\", (e) => {\n    const target = e.target;\n    const sliderWidth = target.parentNode.offsetWidth;\n    let prevX = e.clientX;\n\n    function onMouseMove(e) {\n      const deltaX = e.clientX - prevX;\n      const newPosition = Math.min(Math.max(target.offsetLeft + deltaX, 0), sliderWidth);\n      prevX = e.clientX;\n\n      target.style.left = newPosition + \"px\";\n      target.dataset.value = Math.round((newPosition / sliderWidth) * 100);\n      updateValues();\n    }\n\n    function onMouseUp() {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n    }\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n  });\n});\n\n// Update the values initially\nupdateValues();\n```\n\n\n<script>\nconst sliderContainer = document.querySelector(\".slider-container\");\nconst sliders = document.querySelectorAll(\".slider-pointer\");\nconst value1 = document.getElementById(\"value1\");\nconst value2 = document.getElementById(\"value2\");\nconst value3 = document.getElementById(\"value3\");\nconst value4 = document.getElementById(\"value4\");\n\nfunction updateValues() {\n  const values = Array.from(sliders).map((slider) => Number(slider.dataset.value));\n  value1.textContent = values[0];\n  value2.textContent = values[1] - values[0];\n  value3.textContent = values[2] - values[1];\n  value4.textContent = 100 - (values[2] - values[1] + values[1] - values[0] + values[0]);\n\n\n}\n\nsliders.forEach((slider) => {\n  slider.addEventListener(\"mousedown\", (e) => {\n    const target = e.target;\n    const sliderWidth = target.parentNode.offsetWidth;\n    let prevX = e.clientX;\n\n    function onMouseMove(e) {\n      const deltaX = e.clientX - prevX;\n      const newPosition = Math.min(Math.max(target.offsetLeft + deltaX, 0), sliderWidth);\n      prevX = e.clientX;\n\n      target.style.left = newPosition + \"px\";\n      target.dataset.value = Math.round((newPosition / sliderWidth) * 100);\n      updateValues();\n    }\n\n    function onMouseUp() {\n      document.removeEventListener(\"mousemove\", onMouseMove);\n      document.removeEventListener(\"mouseup\", onMouseUp);\n    }\n\n    document.addEventListener(\"mousemove\", onMouseMove);\n    document.addEventListener(\"mouseup\", onMouseUp);\n  });\n});\n\n// Update the values initially\nupdateValues();\n</script>\n:::\n\n```{=html}\n<div class=\"slider-container\">\n    <div class=\"slider-track\"></div>\n    <div class=\"slider-pointer\" data-value=\"50\" style=\"left: 50%;\"></div>\n    <div class=\"slider-pointer\" data-value=\"90\" style=\"left: 90%;\"></div>\n    <div class=\"slider-pointer\" data-value=\"100\" style=\"left: 100%;\"></div>\n</div>\n<div class=\"result-container\">\n  <div>Value 1: <span id=\"value1\">50</span></div>\n  <div>Value 2: <span id=\"value2\">40</span></div>\n  <div>Value 3: <span id=\"value3\">10</span></div>\n  <div>Value 4: <span id=\"value4\">0</span></div>\n</div>\n```\n\n::: {.cell}\n\n```{.r .cell-code}\npwnormal <- function(mu, tau, sigma, alpha, lambda) {\n  eta <- sqrt(tau^2 + sigma^2)\n  H <- length(alpha)\n  alpha_f <- c(0, alpha, 1)\n  lambda_f <- c(1, lambda)\n  c_h <- (sigma * qnorm(1 - alpha_f) - mu) / eta\n  B_h <- pnorm(c_h[-(H+2)]) - pnorm(c_h[-1])\n  A <- sum(B_h * lambda_f)\n  pr_h <- B_h * lambda_f / A\n  function(x) {\n    x_interval <- cut(x, breaks = sigma * qnorm(1 - alpha_f), include.lowest = TRUE)\n    wt <- rev(lambda_f)[x_interval]\n    gen_prob <- dnorm((x - mu) / eta) / eta\n    wt * gen_prob / A\n  }\n}\n```\n:::\n\n```{ojs}\nmath = require(\"mathjs\")\nnorm = import('https://unpkg.com/norm-dist@3.1.0/index.js?module')\n\nlambda = Array(H+1).fill(1)\n\neta = math.sqrt(tau**2 + sigma**2)\n\n```\n\n\n:::: {.grid .column-page-inset}\n\n::: {.g-col-7}\n\n:::\n\n::: {.g-col-5}\n\n\n```{ojs}\n//| panel: input\n\nviewof H = Inputs.range(\n  [1, 10], \n  {value: 1, step: 1, label: \"Number of thresholds (H):\"}\n)\n\nviewof mu = Inputs.range(\n  [-2, 2], \n  {value: 0, step: 0.01, label: \"Average effect size (mu):\"}\n)\n\nviewof tau = Inputs.range(\n  [0, 2], \n  {value: 0.10, step: 0.01, label: \"Heterogeneity SD (tau):\"}\n)\n\nviewof sigma = Inputs.range(\n  [0, 1], \n  {value: 0.10, step: 0.01, label: \"Standard error (sigma):\"}\n)\n\n```\n\n:::\n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}