{
  "hash": "44b7accaf18b56ac9ab898fdb1cc349c",
  "result": {
    "markdown": "---\ntitle: A handmade clubSandwich for multi-site trials\nauthors: admin\ndate: '2019-03-09'\ndraft: true\ncategories:\n- sandwiches\n- robust variance estimation\n- econometrics\n- weighting\n- instrumental variables\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata(STAR, package = \"AER\")\n\nSTAR_urban <-\n  STAR %>%\n  filter(\n    # limit to urban/inner city schools\n    schoolk %in% c(\"urban\",\"inner-city\"),\n    # limit to complete outcome data\n    !is.na(readk), !is.na(mathk)\n  ) %>%\n  droplevels() %>%\n  # collapse control conditions\n  mutate(\n    stark = fct_collapse(stark, regular = c(\"regular\",\"regular+aide\"))\n  ) %>%\n  # calculate inverse-propensity weight\n  group_by(schoolidk) %>%\n  mutate(\n    n = n(),\n    nT = sum(stark==\"small\"),\n    wt = ifelse(stark==\"small\", n / nT, n / (n - nT))\n  ) %>%\n  select(schoolidk, stark, readk, mathk, wt)\n\nSTAR_summary <- \n  STAR_urban %>%\n  count(schoolidk)\n\nSTAR_urban %>%\n  group_by(schoolidk, stark) %>%\n  summarise(\n    n = n(),\n    wt = sum(wt)\n  ) %>%\n  mutate(n = sum(n)) %>%\n  spread(stark, wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23 × 4\n# Groups:   schoolidk [23]\n   schoolidk     n regular small\n   <fct>     <int>   <dbl> <dbl>\n 1 2            52      52    52\n 2 9           120     120   120\n 3 10           51      51    51\n 4 14           34      34    34\n 5 15           55      55    55\n 6 16          105     105   105\n 7 18           79      79    79\n 8 19           99      99    99\n 9 22          129     129   129\n10 26           49      49    49\n# ℹ 13 more rows\n```\n:::\n:::\n\nAfter these exclusions, the data include a total of `{r} sum(STAR_summary$n)` students from `{r} nrow(STAR_summary)` schools, ranging in size from `{r} min(STAR_summary$n)` to `{r} max(STAR_summary$n)` students.\n\nFor starters, let's get the average impacts using a seeming unrelated regression specification, with both conventional and clubSandwich standard errors. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(clubSandwich)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRegistered S3 method overwritten by 'clubSandwich':\n  method    from    \n  bread.mlm sandwich\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSTAR_wt <- lm(cbind(readk, mathk) ~ 0 + schoolidk + stark, weights = wt, data = STAR_urban)\n\n# conventional SEs\nCR0 <- \n  coef_test(STAR_wt, vcov = \"CR0\", \n            cluster = STAR_urban$schoolidk, \n            test = \"z\",\n            coefs = c(\"readk:starksmall\",\"mathk:starksmall\"))\nCR0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Coef. Estimate   SE t-stat d.f. (z) p-val (z) Sig.\n readk:starksmall     6.21 3.13   1.98      Inf    0.0473    *\n mathk:starksmall    12.47 5.58   2.23      Inf    0.0254    *\n```\n:::\n\n```{.r .cell-code}\n# clubSandwich SEs\nCR2 <- \n  coef_test(STAR_wt, vcov = \"CR2\", \n            cluster = STAR_urban$schoolidk, \n            coefs = c(\"readk:starksmall\",\"mathk:starksmall\"))\n\nCR2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Coef. Estimate   SE t-stat d.f. (Satt) p-val (Satt) Sig.\n readk:starksmall     6.21 2.70    2.3          19       0.0332    *\n mathk:starksmall    12.47 4.79    2.6          19       0.0174    *\n```\n:::\n:::\n\n\nNow I'll do it \"by hand\"---or rather, with a bit of `dplyr`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summary statistics by site\n\nschool_summaries <- \n  STAR_urban %>%\n  group_by(schoolidk, stark) %>%\n  summarise(\n    # means by arm and site\n    readk = mean(readk),\n    mathk = mean(mathk),\n    n_arm = n()\n  ) %>%\n  summarise(\n    # impact estimates by site\n    readk = diff(readk),\n    mathk = diff(mathk),\n    n = sum(n_arm),\n    p = n_arm[stark==\"small\"] / n\n  ) %>%\n  mutate(\n    w = n\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'schoolidk'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# overall impacts\n\nschool_summaries %>%\n  gather(\"subject\",\"impact_j\", readk, mathk) %>%\n  group_by(subject) %>%\n  summarise(\n    impact = weighted.mean(impact_j, w = w),\n    SE_CR0 = sqrt(sum(w^2 * (impact_j - impact)^2) / sum(w)^2),\n    SE_CR2 = sqrt(sum(w^2 * (impact_j - impact)^2 / (1 - w / sum(w))) / sum(w)^2),\n    df_CR2 = 1 / (sum(w^2 / (sum(w) - w)^2) - \n                    2 * sum(w^3 / (sum(w) - w)^2) / sum(w) + \n                    sum(w^2 / (sum(w) - w))^2 / sum(w)^2)\n  ) %>%\n  knitr::kable(digits = 2)\n```\n\n::: {.cell-output-display}\n|subject | impact| SE_CR0| SE_CR2| df_CR2|\n|:-------|------:|------:|------:|------:|\n|mathk   |  12.47|   5.58|   5.76|  19.07|\n|readk   |   6.21|   3.13|   3.23|  19.07|\n:::\n:::\n\n\nThe CR0 and CR2 standard errors match the results from `coef_test`, as do the Satterthwaite degrees of freedom. Note that the degrees of freedom are equal to `{r} round(CR2$df[1], 1)` in this case, a bit less than $J - 1 = 22$ due to variation in the weight assigned to each school. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}