{
  "hash": "7fbee87dd09122f86e939d0471fe241a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Converting from odds ratios to standardized mean differences: What to do with\n  logistic regression coefficients?'\nauthors: admin\ndate: '2019-05-26'\ncategories:\n- meta-analysis\n- odds ratio\n- effect size\ndraft: true\ncode-tools: true\n\n---\n\n\nOne of the central problems in research synthesis is that studies use a variety of different types of outcome measures to assess a construct. This is the main reason that meta-analysis often uses standardized, scale-free effect sizes (such as standardized mean differences), so that findings from studies that use different measures can be combined and contrasted on a common metric. In syntheses of education research (as well as other fields), a further issue that sometimes arises is that some included studies might report effects on a dichotomous outcome, while others report effects (of the same intervention, say) but using a continuous outcome measure. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogit <- function(x) log(x) - log(1 - x)\n\nsimulate_OR_to_SMD <- function(p0, SMD, r, n0, n1) {\n  \n  # simulate data\n  trt <- c(rep(0, n0), rep(1, n1))\n  Y <- rlogis(n0 + n1, location = logit(p0) + trt * SMD * pi / sqrt(3))\n  X <- r * (Y - trt * SMD) * sqrt(3) / pi + rnorm(n0 + n1, sd = sqrt(1 - r^2))\n  B <- Y > 0\n\n  # calculate LORs\n  logit_fit <- glm(B ~ trt + X, family = \"binomial\")\n  LOR_marginal <- as.numeric(diff(logit(tapply(B, trt, mean))))\n  LOR_logit <- coef(logit_fit)[[\"trt\"]]\n  LORs <- c(LOR_marginal, LOR_logit)\n  \n  # convert to SMDs\n  SMDs <- LORs * sqrt(3) / pi\n  \n  data.frame(type = c(\"marginal\",\"conditional\"), LOR_est = LORs, SMD_est = SMDs)\n} \n\nsimulate_OR_to_SMD(p0 = 0.6, SMD = 0.4, r = 0.7, n0 = 10000, n1 = 10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         type   LOR_est   SMD_est\n1    marginal 0.6994991 0.3856540\n2 conditional 0.7944520 0.4380043\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nparams <- \n  list(\n    p0 = seq(0.2, 0.8, 0.2),\n    SMD = seq(0.2, 0.8, 0.2),\n    r = seq(0, 0.9, 0.1)\n  ) %>%\n  cross_df()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `cross_df()` was deprecated in purrr 1.0.0.\nℹ Please use `tidyr::expand_grid()` instead.\nℹ See <https://github.com/tidyverse/purrr/issues/768>.\n```\n\n\n:::\n\n```{.r .cell-code}\nSMDs <- \n  params %>%\n  mutate(res = pmap(., simulate_OR_to_SMD, n0 = 50000, n1 = 50000)) %>%\n  unnest() %>%\n  mutate(RB = SMD_est / SMD)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `cols` is now required when using `unnest()`.\nℹ Please use `cols = c(res)`.\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(SMDs, aes(r, RB, color = type)) + \n  geom_point() + geom_line() + \n  facet_grid(SMD ~ p0, labeller = \"label_both\") + \n  theme_light()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}