{
  "hash": "bad777459c2e8fd3a853a62b2b9bdfb6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Bootstrap confidence interval variations\ndate: '2025-01-10'\ncategories:\n- programming\n- Rstats\n- bootstrap\ncode-fold: show\ncode-tools: true\ntoc: true\nbibliography: \"references.bib\"\ncsl: \"../apa.csl\"\n---\n\n\nI recently added some new utilities for calculating bootstrap confidence intervals to the [`simhelpers` package](https://meghapsimatrix.github.io/simhelpers/). \nThe functions are designed to make it a bit more convenient to implement Monte Carlo simulations of bootstrap CIs, including when using an extrapolation technique suggested by @boos2000MonteCarloEvaluation, which [I blogged about here](/posts/Simulating-bootstrap-CIs/). \nWith the latest update, the package now provides options for a bunch of different variants of bootstrap CIs, including:\n\n* the normal CI, which uses bootstrapping to estimate a standard error and then takes plus or minus a normal critical value times the SE;\n* the studentized CI, which uses the bootstrap distribution of a t-statistic rather than the point estimator;\n* the percentile CI, which takes percentiles of the bootstrap distribution as the end-points of the CI;\n* the so-called \"basic\" CI, which is similar to the percentile CI but pivots the bootstrap distribution around the point estimator;\n* a bias-corrected version of the percentile CI;\n* Efron's bias-corrected-and-accelerated CI, which provides more accurate coverage levels than alternative CIs for some classes of estimators. \n\nIn this post, I'll demonstrate these different CI variants with an example, compare the results to implementations in other packages, and then show how the `simhelpers` implementation can be used for the  @boos2000MonteCarloEvaluation extrapolation technique.\n\n# An example\n\nThese variants are also implemented in other packages. \nMost notably, all of them are implemented in [`boot`](https://cran.r-project.org/package=boot) [@bootpkg], the venerable R package companion to the @Davison1997bootstrap book on bootstrapping.\nAlthough powerful, the `boot` package is not super friendly from a user-experience perspective. \nIts output is a bit unwieldy, there are several quirks to its naming conventions, and the confidence interval calculations require the user to implement the bootstrap resampling calculations through `boot::boot()`, which is sometimes a bit awkward.\nNewer packages that provide some of the methods include [`rsample`](https://rsample.tidymodels.org/) [@rsamplepkg] and [`infer`](https://infer.netlify.app/) [@Couch2021infer].\nBoth of these offer pipe-friendly workflows, but neither provides the full slate of CI variants. \nSimilar to boot, these packages also lock in the user to the package's resampling tools. \nAnd none of the packages support a workflow for the @boos2000MonteCarloEvaluation extrapolation technique. \n\n# Bootstrap confidence intervals for a mean\n\nLet me demonstrate the confidence intervals using an example dataset from the `infer` package for simplicity. `infer::gss` is a subset of data from many different waves of the General Social Survey. For illustrative purposes, I'll use data from the time-period of 2008-2018. Suppose we want to estimate the average number of hours that respondents reported working. Here's the sample distribution:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"gss\", package = \"infer\")\ngss_sub <- subset(gss, year >= 2008)\nhist(gss_sub$hours, main = NULL, xlab = \"Hours worked\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr_dat <- function(n, rho, df = 10) {\n  require(mvtnorm)\n  Sigma <- rho + diag(1 - rho, nrow = 2)\n  rmvt(n = n, sigma = Sigma, df = 10)\n}\n\ncalc_cor <- \\(x) cor(x[,1], x[,2])\n\nr_dat(30, rho = 0.8) |> calc_cor()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7476399\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}