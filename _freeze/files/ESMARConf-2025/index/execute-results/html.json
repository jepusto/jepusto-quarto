{
  "hash": "890cc47a4c097ad27911541cbc18d3ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"metaselection\"\nsubtitle: \"Selection models for meta-analyses of dependent effect sizes\"\nauthor: \"James E. Pustejovsky and Martyna Citkowicz\" \ndate: \"June 13, 2025\"\nformat: \n  revealjs:\n    math: true\n    html-math-method: mathjax\n    slide-number: true\n    chalkboard: \n      buttons: false\n    css: styles.css\n    theme: [simple, mytheme.scss]\neditor: source\nbibliography: references.bib\n---\n\n\n## {background=\"#43464B\"}\n\n### Collaborators from the American Institutes for Research\n\n:::: {.columns}\n\n::: {.column width=\"20%\"}\nMegha Joshi\n\n![](images/Joshi.jpg)\n:::\n\n\n::: {.column width=\"20%\"}\nMelissa Rodgers\n\n\n![](images/Rodgers.jpg)\n:::\n\n::: {.column width=\"20%\"}\nRyan Williams\n\n![](images/Williams.jpg)\n:::\n\n::: {.column width=\"20%\"}\nJoshua Polanin\n\n![](images/Polanin.jpg)\n:::\n\n::: {.column width=\"20%\"}\nDavid Miller\n\n![](images/Miller.jpg)\n:::\n\n::::\n\n::: fragment\n\n### Acknowledgement\n\nThe research reported here was supported, in whole or in part, by the Institute of Education Sciences, U.S. Department of Education, through grant R305D220026 to the American Institutes for Research. The opinions expressed are those of the authors and do not represent the views of the Institute or the U.S. Department of Education.\n:::\n\n## Selective reporting of primary study results\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n- Selective reporting occurs if affirmative findings are more likely to be reported and available for inclusion in meta-analysis\n\n- Selective reporting distorts the evidence base available for systematic review/meta-analysis\n  - Inflates average effect size estimates from meta-analysis\n  - Biases estimates of heterogeneity [@augusteijn2019effect]\n  \n- Concerns about selective reporting span the social, behavioral, and health sciences.\n\n:::\n\n\n::: {.column width=\"40%\"}\n![](images/carnival-mirror.jpeg)\n:::\n::::\n\n::: {.notes}\n- For a given meta-analysis, we expect strength of selection to depend on\n\n    - Rigor of the systematic review search process.\n    \n    - Whether effect sizes are from focal or ancillary analysis.\n:::\n\n## Many available tools for investigating selective reporting {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- Graphical diagnostics\n\n    - Funnel plots\n    - Contour-enhanced funnel plots\n    - Power-enhanced funnel plots (sunset plots)\n\n![](images/toolbelt.jpg)\n:::\n\n::: {.column width=\"50%\"}\n    \n- Tests/adjustments for funnel plot asymmetry\n    \n    - Trim-and-fill\n    - Egger's regression\n    - PET/PEESE\n    - Kinked meta-regression\n    \n- Selection models\n\n    - Weight-function models\n    - Copas models\n    - Sensitivity analysis\n    \n- p-value diagnostics\n\n    - Test of Excess Significance\n    - $p$-curve / $p$-uniform / $p\\text{-uniform}^*$\n\n:::\n\n::::\n\n## But few that accommodate dependent effect sizes\n\n::::: {.columns}\n\n::: {.column width=\"40%\"}\n![](images/Multiple-outcomes.png)\n![](images/Multiple-timepoints.png)\n![](images/Multiple-treatments.png)\n\n\n:::\n\n\n:::: {.column width=\"60%\"}\n::: {.fragment}\n\n- Dependent effect sizes are ubiquitous in education and social science meta-analyses.\n\n- We have well-developed methods for modeling dependent effect sizes assuming no selection.\n\n- But only very recent developments for investigating selective reporting in databases with dependent effect sizes [@chen2024adapting].\n:::\n\n::::\n\n:::::\n\n## Selection models have two parts\n\n::: {.fragment}\n\n- Random effects model for the evidence-generating process (_before_ selective reporting):\n    $$T_{ij} \\sim N\\left(\\ \\mu, \\ \\tau^2 + \\sigma_{ij}^2 \\right)$$\n\n:::\n\n::: {.fragment}\n\n- A model describing $\\text{Pr}(\\ T_{ij} \\text{ is observed} \\ )$ as a function of its $p$-value $(p_{ij})$\n\n:::\n\n::::: {.columns}\n\n\n::: {.cell}\n\n:::\n\n\n:::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n@vevea1995general step-function model\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-1-1.png){width=90%}\n:::\n:::\n\n\n:::\n::::\n\n:::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n@citkowicz2017parsimonious beta-function model\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-2-1.png){width=90%}\n:::\n:::\n\n\n:::\n::::\n\n:::::\n\n## A piece-wise normal distribution {.smaller}\n\nUnder @vevea1995general step-function model, the distribution of observed effect size estimates is piece-wise normal.\n\n\n```{ojs}\nmath = require(\"mathjs\")\nnorm = import('https://unpkg.com/norm-dist@3.1.0/index.js?module')\n\neta = math.sqrt(tau**2 + sigma**2)\nH = 2\nalpha = [alpha1, alpha2]\nlambda = [1, lambda1, lambda2_ratio * lambda1]\nlambda_max = math.max(lambda)\n\nfunction findlambda(p, alp, lam) {\n  var m = 0;\n  while (p >= alp[m]) {\n    m += 1;\n  }\n  return lam[m];\n}\n\nfunction findMoments(mu, tau, sigma, alp, lam) {\n  let H = alp.length;\n  let eta = math.sqrt(tau**2 + sigma**2);\n  \n  let gamma_h = Array(H+2).fill(null).map((x,i) => {\n    if (i==0) {\n      return Infinity;\n    } else if (i==H+1) {\n      return -Infinity;\n    } else {\n      return sigma * norm.icdf(1 - alp[i-1]);\n    }\n  });\n  \n  let c_h = Array(H+2).fill(null).map((x,i) => {\n    return (gamma_h[i] - mu) / eta;\n  });\n\n  let B_h = Array(H+1).fill(null).map((x,i) => {\n    return norm.cdf(c_h[i]) - norm.cdf(c_h[i+1])\n  });\n\n  let Ai = 0;\n  for (let i = 0; i <= H; i++) {\n  \tAi += lam[i] * B_h[i];\n  }\n  \n  let psi_h = Array(H+1).fill(null).map((x,i) => {\n    return (norm.pdf(c_h[i+1]) - norm.pdf(c_h[i])) / B_h[i]\n  }); \n\n  let psi_top = 0;\n  for (let i = 0; i <= H; i++) {\n  \tpsi_top += lam[i] * B_h[i] * psi_h[i];\n  }\n  \n  let psi_bar = psi_top / Ai;\n\n  let ET = mu + eta * psi_bar;\n\n  let dc_h = c_h.map((c_val) => {\n    if (math.abs(c_val) == Infinity) {\n      return 0;\n    } else {\n      return c_val * norm.pdf(c_val);\n    }\n  });\n\n  let kappa_h = Array(H+1).fill(null).map((x,i) => {\n    return (dc_h[i] - dc_h[i+1]) / B_h[i];\n  });\n\n  let kappa_top = 0;\n  for (let i = 0; i <= H; i++) {\n  \tkappa_top += lam[i] * B_h[i] * kappa_h[i];\n  }\n  let kappa_bar = kappa_top / Ai;\n  let SDT = eta * math.sqrt(1 - kappa_bar - psi_bar**2);\n  \n  return ({Ai: Ai, ET: ET, SDT: SDT});\n}\n\nmoments = findMoments(mu, tau, sigma, alpha, lambda)\nAi_toprint = moments.Ai.toFixed(3)\nET_toprint = moments.ET.toFixed(3)\neta_toprint = eta.toFixed(3)\nSDT_toprint = moments.SDT.toFixed(3)\n\n```\n\n```{ojs}\npts = 201\n\ndensity_dat = Array(pts).fill().map((element, index) => {\n  let t = mu - 3 * eta + index * eta * 6 / (pts - 1);\n  let p = 1 - norm.cdf(t / sigma);\n  let dt = norm.pdf((t - mu) / eta) / eta;\n  let lambda_val = findlambda(p, alpha, lambda);\n  return ({\n    t: t,\n    d_unselected: dt,\n    d_selected: lambda_val * dt / lambda_max\n  })\n})\n\n```\n\n\n::::: {.columns}\n\n:::: {.column width=\"30%\"}\n\n\n```{ojs}\n//| panel: input\n\nviewof mu = Inputs.range(\n  [-2, 2], \n  {value: 0.1, step: 0.01, label: tex`\\mu`}\n)\n\nviewof tau = Inputs.range(\n  [0, 2], \n  {value: 0.15, step: 0.01, label: tex`\\tau`}\n)\n\nviewof sigma = Inputs.range(\n  [0, 1], \n  {value: 0.25, step: 0.01, label: tex`\\sigma_i`}\n)\n\nviewof alpha1 = Inputs.range(\n  [0, 1],\n  {value: 0.025, step: 0.005, label: tex`\\alpha_1`}\n)\n\nviewof alpha2 = Inputs.range(\n  [0, 1],\n  {value: 0.50, step: 0.005, label: tex`\\alpha_2`}\n)\n\nviewof lambda1 = Inputs.range(\n  [0, 2],\n  {value: 1, step: 0.01, label: tex`\\lambda_1`}\n)\n\nviewof lambda2_ratio = Inputs.range(\n  [0, 2],\n  {value: 1, step: 0.01, label: tex`\\lambda_2 / \\lambda_1`}\n)\n\n```\n\n::::\n\n:::: {.column width=\"70%\"}\n\n\n```{ojs}\nPlot.plot({\n  height: 500,\n  width: 1000,\n  y: {\n    grid: false,\n    label: \"Density\"\n  },\n  x: {\n    label: \"Effect size estimate (Ti)\"\n  },   \n  marks: [\n    Plot.ruleY([0]),\n    Plot.ruleX([0]),\n    Plot.areaY(density_dat, {x: \"t\", y: \"d_unselected\", fillOpacity: 0.3}),\n    Plot.areaY(density_dat, {x: \"t\", y: \"d_selected\", fill: \"blue\", fillOpacity: 0.5}),\n    Plot.lineY(density_dat, {x: \"t\", y: \"d_selected\", stroke: \"blue\"})\n  ]\n})\n```\n\n\n:::{.moments}\n\n\n```{ojs}\ntex`\n\\begin{aligned}\n\\mu &= ${mu} & \\qquad \\sqrt{\\tau^2 + \\sigma_{ij}} &= ${eta_toprint} \\\\\n\\mathbb{E}\\left(T_{ij}\\right) &= ${ET_toprint}\n& \\qquad \\sqrt{\\mathbb{V}\\left(T_{ij}\\right)} &= ${SDT_toprint} \\\\ \n\\Pr(T_{ij} \\text{ is observed}) &= ${Ai_toprint}\n\\end{aligned}\n`\n```\n\n:::\n\n::::\n\n:::::\n\n## Estimation Strategy\n\n- Model the marginal distribution of observed effects, ignoring the dependence structure\n\n    - Maximum likelihood (composite marginal likelihood)\n    \n    - Augmented, reweighted Gaussian likelihood\n\n::::: {.fragment}\n\n### Two methods of handling dependence\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n- Cluster-robust variance estimation (sandwich estimators)\n\n![](images/baloney-sandwich.jpg)\n:::\n\n::: {.column width=\"50%\"}\n\n\n- Clustered bootstrap re-sampling\n\n![](images/boot.png){width=50% fig-align=\"center\"}\n\n:::\n\n::::\n:::::\n\n\n## Color priming\n\n@lehmann2018meta reported a systematic review of studies on __color-priming__, examining whether exposure to the color red influenced attractiveness judgments.\n\n\n::: {.cell}\n\n:::\n\n  \n:::: {.r-stack}\n\n::: {.fragment}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_umvjrd3hrnhic6qdu90a(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_umvjrd3hrnhic6qdu90a\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow_6nq2ijkum0jlj8ocb4z7(i, colspan, content) {\n        var table = document.getElementById('tinytable_umvjrd3hrnhic6qdu90a');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_umvjrd3hrnhic6qdu90a(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_umvjrd3hrnhic6qdu90a\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\nwindow.addEventListener('load', function () { insertSpanRow_6nq2ijkum0jlj8ocb4z7(3, 5, '(B) Moderation by design type') });\nwindow.addEventListener('load', function () { insertSpanRow_6nq2ijkum0jlj8ocb4z7(2, 5, '(A) Summary meta-analysis') });\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 6, j: 1 }, { i: 6, j: 2 }, { i: 6, j: 3 }, { i: 5, j: 1 }, { i: 5, j: 2 }, { i: 5, j: 3 }, { i: 5, j: 4 }, { i: 6, j: 4 },  ], css_id: 'tinytable_css_mn6byclktzspfbykox6w',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_a5a51jzpw829esoj7gph',}, \n          { positions: [ { i: 5, j: 0 }, { i: 6, j: 0 },  ], css_id: 'tinytable_css_ksj33mxadwvfd54vo0fm',}, \n          { positions: [ { i: 4, j: 0 }, { i: 4, j: 3 }, { i: 4, j: 4 }, { i: 4, j: 1 }, { i: 4, j: 2 },  ], css_id: 'tinytable_css_8lcnk9xyzyq9kc8g44fz',}, \n          { positions: [ { i: 3, j: 0 },  ], css_id: 'tinytable_css_bo85pvhssdz8lz1u5q07',}, \n          { positions: [ { i: 2, j: 4 }, { i: 2, j: 1 }, { i: 2, j: 0 }, { i: 2, j: 2 }, { i: 2, j: 3 },  ], css_id: 'tinytable_css_462w8lobo3m6gs0g2767',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 4 }, { i: 0, j: 3 },  ], css_id: 'tinytable_css_ktlsrrjshbwaiaont7gw',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_umvjrd3hrnhic6qdu90a(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_mn6byclktzspfbykox6w, .table th.tinytable_css_mn6byclktzspfbykox6w { color: white; background-color: white; }\n      .table td.tinytable_css_a5a51jzpw829esoj7gph, .table th.tinytable_css_a5a51jzpw829esoj7gph { text-align: center; border-bottom: solid #d3d8dc 0.05em; text-align: center; }\n      .table td.tinytable_css_ksj33mxadwvfd54vo0fm, .table th.tinytable_css_ksj33mxadwvfd54vo0fm { padding-left: 1em; color: white; background-color: white; }\n      .table td.tinytable_css_8lcnk9xyzyq9kc8g44fz, .table th.tinytable_css_8lcnk9xyzyq9kc8g44fz { font-weight: bold; background-color: lightgray; color: white; background-color: white; }\n      .table td.tinytable_css_bo85pvhssdz8lz1u5q07, .table th.tinytable_css_bo85pvhssdz8lz1u5q07 { padding-left: 1em; }\n      .table td.tinytable_css_462w8lobo3m6gs0g2767, .table th.tinytable_css_462w8lobo3m6gs0g2767 { font-weight: bold; background-color: lightgray; }\n      .table td.tinytable_css_ktlsrrjshbwaiaont7gw, .table th.tinytable_css_ktlsrrjshbwaiaont7gw { text-align: center; text-align: center; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table\" id=\"tinytable_umvjrd3hrnhic6qdu90a\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n<tr>\n<th scope=\"col\" align=\"center\" colspan=1> </th>\n<th scope=\"col\" align=\"center\" colspan=2>Mean ES</th>\n<th scope=\"col\" align=\"center\" colspan=2>Heterogeneity Variance</th>\n</tr>\n        \n              <tr>\n                <th scope=\"col\">Coef.</th>\n                <th scope=\"col\">Est.</th>\n                <th scope=\"col\">SE</th>\n                <th scope=\"col\">Est.</th>\n                <th scope=\"col\">SE</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Overall</td>\n                  <td>0.207</td>\n                  <td>0.0571</td>\n                  <td>0.103</td>\n                  <td>0.0251</td>\n                </tr>\n                <tr>\n                  <td>Between-Subjects</td>\n                  <td>0.19</td>\n                  <td>0.0642</td>\n                  <td>0.104</td>\n                  <td>0.0256</td>\n                </tr>\n                <tr>\n                  <td>Within-Subjects</td>\n                  <td>0.273</td>\n                  <td>0.1456</td>\n                  <td>0.104</td>\n                  <td>0.0256</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_ts96vp07r1n2uvs0et3w(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_ts96vp07r1n2uvs0et3w\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow_7qmkump8wud2lh5idbnp(i, colspan, content) {\n        var table = document.getElementById('tinytable_ts96vp07r1n2uvs0et3w');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_ts96vp07r1n2uvs0et3w(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_ts96vp07r1n2uvs0et3w\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\nwindow.addEventListener('load', function () { insertSpanRow_7qmkump8wud2lh5idbnp(3, 5, '(B) Moderation by design type') });\nwindow.addEventListener('load', function () { insertSpanRow_7qmkump8wud2lh5idbnp(2, 5, '(A) Summary meta-analysis') });\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_e0uda794zo8sc9riu9kh',}, \n          { positions: [ { i: 3, j: 0 }, { i: 6, j: 0 }, { i: 5, j: 0 },  ], css_id: 'tinytable_css_freomxq58hnc2i0m5deo',}, \n          { positions: [ { i: 2, j: 0 }, { i: 2, j: 2 }, { i: 2, j: 3 }, { i: 4, j: 3 }, { i: 4, j: 0 }, { i: 4, j: 1 }, { i: 4, j: 4 }, { i: 2, j: 1 }, { i: 2, j: 4 }, { i: 4, j: 2 },  ], css_id: 'tinytable_css_eqv0eiezm36ks66stqne',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 4 }, { i: 0, j: 3 },  ], css_id: 'tinytable_css_cxgz12wzqt1fd42nvwi7',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_ts96vp07r1n2uvs0et3w(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_e0uda794zo8sc9riu9kh, .table th.tinytable_css_e0uda794zo8sc9riu9kh { text-align: center; border-bottom: solid #d3d8dc 0.05em; text-align: center; }\n      .table td.tinytable_css_freomxq58hnc2i0m5deo, .table th.tinytable_css_freomxq58hnc2i0m5deo { padding-left: 1em; }\n      .table td.tinytable_css_eqv0eiezm36ks66stqne, .table th.tinytable_css_eqv0eiezm36ks66stqne { font-weight: bold; background-color: lightgray; }\n      .table td.tinytable_css_cxgz12wzqt1fd42nvwi7, .table th.tinytable_css_cxgz12wzqt1fd42nvwi7 { text-align: center; text-align: center; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table\" id=\"tinytable_ts96vp07r1n2uvs0et3w\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n<tr>\n<th scope=\"col\" align=\"center\" colspan=1> </th>\n<th scope=\"col\" align=\"center\" colspan=2>Mean ES</th>\n<th scope=\"col\" align=\"center\" colspan=2>Heterogeneity Variance</th>\n</tr>\n        \n              <tr>\n                <th scope=\"col\">Coef.</th>\n                <th scope=\"col\">Est.</th>\n                <th scope=\"col\">SE</th>\n                <th scope=\"col\">Est.</th>\n                <th scope=\"col\">SE</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Overall</td>\n                  <td>0.207</td>\n                  <td>0.0571</td>\n                  <td>0.103</td>\n                  <td>0.0251</td>\n                </tr>\n                <tr>\n                  <td>Between-Subjects</td>\n                  <td>0.19</td>\n                  <td>0.0642</td>\n                  <td>0.104</td>\n                  <td>0.0256</td>\n                </tr>\n                <tr>\n                  <td>Within-Subjects</td>\n                  <td>0.273</td>\n                  <td>0.1456</td>\n                  <td>0.104</td>\n                  <td>0.0256</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n:::\n\n::::\n\n## Contour-enhanced funnel plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-11-1.png){width=75%}\n:::\n:::\n\n\n## Color-priming selection models {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(metaselection)\n\n# load the data\ndata(\"dat.lehmann2018\", package = \"metadat\")\n\n# tidy up\ndat.lehmann2018$study <- dat.lehmann2018$Full_Citation\ndat.lehmann2018$sei <- sqrt(dat.lehmann2018$vi)\ndat.lehmann2018$Design <- factor(dat.lehmann2018$Design, levels = c(\"Between Subjects\",\"Within Subjects\"), labels = c(\"Between\",\"Within\"))\n\n# fit a one-step selection model\nsel1 <- selection_model(\n  yi = yi,                 # effect size est.\n  sei = sei,               # standard error\n  cluster = study,         # identifier for independent clusters\n  data = dat.lehmann2018,  # dataset\n  selection_type = \"step\", # type of selection model\n  steps = .025,            # single threshold for step-function\n  estimator = \"CML\",       # estimation method\n  bootstrap = \"none\"       # large-sample sandwich standard errors\n)\n```\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sel1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStep Function Model \n \nCall: \nselection_model(data = dat.lehmann2018, yi = yi, sei = sei, cluster = study, \n    selection_type = \"step\", steps = 0.025, estimator = \"CML\", \n    bootstrap = \"none\")\n\nNumber of clusters = 41; Number of effects = 81\n\nSteps: 0.025 \nEstimator: composite marginal likelihood \nVariance estimator: robust \n\nLog composite likelihood of selection model: -44.46436\nInverse selection weighted partial log likelihood: 58.35719 \n\nMean effect estimates:                                                \n                                    Large Sample\n Coef. Estimate Std. Error p-value  Lower  Upper\n  beta    0.133      0.137   0.333 -0.136  0.402\n\nHeterogeneity estimates:                                                \n                                    Large Sample\n Coef. Estimate Std. Error p-value  Lower  Upper\n  tau2   0.0811     0.0845     --- 0.0105  0.625\n\nSelection process estimates:\n Step: 0 < p <= 0.025; Studies: 16; Effects: 25                                                 \n                                     Large Sample\n   Coef. Estimate Std. Error p-value Lower  Upper\n lambda0        1        ---     ---   ---    ---\n\n Step: 0.025 < p <= 1; Studies: 29; Effects: 56                                                  \n                                      Large Sample\n   Coef. Estimate Std. Error p-value  Lower  Upper\n lambda1    0.548      0.616   0.593 0.0607   4.96\n```\n\n\n:::\n:::\n\n\n:::\n\n## Selective reporting of non-significant results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselection_plot(sel1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-14-1.png){width=75%}\n:::\n:::\n\n\n\n## Now with bootstrapping! {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# turn on parallel processing\nlibrary(future)\nplan(multisession, workers = 8)\n\nset.seed(20250613) # for reproducibility\n\nsel1_boot <- selection_model(\n  yi = yi,                    # effect size est.\n  sei = sei,                  # standard error\n  cluster = study,            # identifier for independent clusters\n  data = dat.lehmann2018,     # dataset\n  selection_type = \"step\",    # type of selection model\n  steps = .025,               # single threshold for step-function\n  estimator = \"CML\",          # estimation method\n  bootstrap = \"two-stage\",    # recommended type of bootstrapping\n  R = 1999,                   # number of bootstrap re-samples\n  CI_type = c(\"large-sample\", # keep the large-sample sandwich CI\n              \"percentile\")   # recommended type of bootstrap CI\n)\n```\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sel1_boot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStep Function Model with Cluster Bootstrapping \n \nCall: \nselection_model(data = dat.lehmann2018, yi = yi, sei = sei, cluster = study, \n    selection_type = \"step\", steps = 0.025, estimator = \"CML\", \n    CI_type = c(\"large-sample\", \"percentile\"), bootstrap = \"two-stage\", \n    R = 1999)\n\nNumber of clusters = 41; Number of effects = 81\n\nSteps: 0.025 \nEstimator: composite marginal likelihood \nVariance estimator: robust \nBootstrap type: two-stage \nNumber of bootstrap replications: 1999 \n\nLog composite likelihood of selection model: -44.46436\nInverse selection weighted partial log likelihood: 58.35719 \n\nMean effect estimates:                                                                     \n                                    Large Sample Percentile Bootstrap\n Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n  beta    0.133      0.137   0.333 -0.136  0.402    -0.0174     0.435\n\nHeterogeneity estimates:                                                                     \n                                    Large Sample Percentile Bootstrap\n Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n  tau2   0.0811     0.0845     --- 0.0105  0.625   1.73e-17     0.238\n\nSelection process estimates:\n Step: 0 < p <= 0.025; Studies: 16; Effects: 25                                                                      \n                                     Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value Lower  Upper      Lower     Upper\n lambda0        1        ---     ---   ---    ---        ---       ---\n\n Step: 0.025 < p <= 1; Studies: 29; Effects: 56                                                                       \n                                      Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n lambda1    0.548      0.616   0.593 0.0607   4.96     0.0537      2.88\n```\n\n\n:::\n:::\n\n\n:::\n\n## Add a moderator {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20250613) # for reproducibility\n\nsel1_mod <- selection_model(\n  yi = yi,                    # effect size est.\n  sei = sei,                  # standard error\n  cluster = study,            # identifier for independent clusters\n  mean_mods = ~ 0 + Design,   # design type moderator\n  data = dat.lehmann2018,     # dataset\n  selection_type = \"step\",    # type of selection model\n  steps = .025,               # single threshold for step-function\n  estimator = \"CML\",          # estimation method\n  bootstrap = \"two-stage\",    # recommended type of bootstrapping\n  R = 1999,                   # number of bootstrap re-samples\n  CI_type = c(\"large-sample\", # keep the large-sample sandwich CI\n              \"percentile\")   # recommended type of bootstrap CI\n)\n```\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sel1_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStep Function Model with Cluster Bootstrapping \n \nCall: \nselection_model(data = dat.lehmann2018, yi = yi, sei = sei, cluster = study, \n    selection_type = \"step\", steps = 0.025, mean_mods = ~0 + \n        Design, estimator = \"CML\", CI_type = c(\"large-sample\", \n        \"percentile\"), bootstrap = \"two-stage\", R = 1999)\n\nNumber of clusters = 41; Number of effects = 81\n\nSteps: 0.025 \nEstimator: composite marginal likelihood \nVariance estimator: robust \nBootstrap type: two-stage \nNumber of bootstrap replications: 1990 \n\nLog composite likelihood of selection model: -44.12226\nInverse selection weighted partial log likelihood: 61.14273 \n\nMean effect estimates:                                                                                  \n                                                 Large Sample Percentile Bootstrap\n              Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n beta_DesignBetween    0.113      0.117   0.333 -0.116  0.343    -0.0484     0.339\n  beta_DesignWithin    0.196      0.234   0.400 -0.261  0.654     0.0104     0.985\n\nHeterogeneity estimates:                                                                     \n                                    Large Sample Percentile Bootstrap\n Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n  tau2   0.0785      0.081     --- 0.0104  0.593   1.14e-17     0.197\n\nSelection process estimates:\n Step: 0 < p <= 0.025; Studies: 16; Effects: 25                                                                      \n                                     Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value Lower  Upper      Lower     Upper\n lambda0        1        ---     ---   ---    ---        ---       ---\n\n Step: 0.025 < p <= 1; Studies: 29; Effects: 56                                                                       \n                                      Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n lambda1    0.533      0.601   0.577 0.0584   4.86      0.042      2.66\n```\n\n\n:::\n:::\n\n\n:::\n\n## Add another step {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20250613) # for reproducibility\n\nsel2_mod <- selection_model(\n  yi = yi,                    # effect size est.\n  sei = sei,                  # standard error\n  cluster = study,            # identifier for independent clusters\n  mean_mods = ~ 0 + Design,   # design type moderator\n  data = dat.lehmann2018,     # dataset\n  selection_type = \"step\",    # type of selection model\n  steps = c(.025,.500),       # two thresholds for step-function\n  estimator = \"CML\",          # estimation method\n  bootstrap = \"two-stage\",    # recommended type of bootstrapping\n  R = 1999,                   # number of bootstrap re-samples\n  CI_type = c(\"large-sample\", # keep the large-sample sandwich CI\n              \"percentile\")   # recommended type of bootstrap CI\n)\n```\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sel2_mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStep Function Model with Cluster Bootstrapping \n \nCall: \nselection_model(data = dat.lehmann2018, yi = yi, sei = sei, cluster = study, \n    selection_type = \"step\", steps = c(0.025, 0.5), mean_mods = ~0 + \n        Design, estimator = \"CML\", CI_type = c(\"large-sample\", \n        \"percentile\"), bootstrap = \"two-stage\", R = 1999)\n\nNumber of clusters = 41; Number of effects = 81\n\nSteps: 0.025, 0.5 \nEstimator: composite marginal likelihood \nVariance estimator: robust \nBootstrap type: two-stage \nNumber of bootstrap replications: 1990 \n\nLog composite likelihood of selection model: -43.51452\nInverse selection weighted partial log likelihood: 85.42712 \n\nMean effect estimates:                                                                                  \n                                                 Large Sample Percentile Bootstrap\n              Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n beta_DesignBetween   0.0419      0.140   0.765 -0.233  0.317    -0.1706     0.335\n  beta_DesignWithin   0.1462      0.247   0.554 -0.338  0.631    -0.0329     0.989\n\nHeterogeneity estimates:                                                                      \n                                     Large Sample Percentile Bootstrap\n Coef. Estimate Std. Error p-value   Lower  Upper      Lower     Upper\n  tau2   0.0804     0.0881     --- 0.00937   0.69   1.26e-17     0.207\n\nSelection process estimates:\n Step: 0 < p <= 0.025; Studies: 16; Effects: 25                                                                      \n                                     Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value Lower  Upper      Lower     Upper\n lambda0        1        ---     ---   ---    ---        ---       ---\n\n Step: 0.025 < p <= 0.5; Studies: 22; Effects: 33                                                                       \n                                      Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n lambda1    0.476      0.595   0.552 0.0412    5.5     0.0364      2.68\n\n Step: 0.5 < p <= 1; Studies: 17; Effects: 23                                                                       \n                                      Large Sample Percentile Bootstrap\n   Coef. Estimate Std. Error p-value  Lower  Upper      Lower     Upper\n lambda2    0.307      0.466   0.437 0.0156   6.03     0.0122      3.13\n```\n\n\n:::\n:::\n\n\n:::\n\n## Selective reporting of non-significant results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselection_plot(sel2_mod, draw_boots = FALSE) + \n  ggplot2::coord_cartesian(ylim = c(0,1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-18-1.png){width=75%}\n:::\n:::\n\n\n## Discussion\n\n- Other supported models:\n\n    - beta-function models [@citkowicz2017parsimonious]\n    \n    - Location-scale meta-regression [@viechtbauer2022locationscale]\n    \n    - Predictors of selection [@Coburn2015publication]\n    \n::: {.fragment}\n\n\n- Marginal step-function selection models are worth adding to the toolbox [@pustejovsky2025estimation].\n\n    - Low bias compared to other selective reporting adjustments (including PET-PEESE)\n    \n    - Bias-variance trade-off relative to regular meta-analytic models\n    \n    - Two-stage clustered bootstrap percentile confidence intervals work tolerably well\n    \n:::\n\n\n## R package `metaselection`\n\n- Currently available on Github at <https://github.com/jepusto/metaselection>\n\n- Install using\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"jepusto/metaselection\", build_vignettes = TRUE)\n```\n:::\n\n\n- Under active development, suggestions welcome!\n\n## References\n\n::: {#refs}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}