---
title: Step-function selection models for meta-analysis
date: '2024-06-18'
draft: true
---

```{ojs}
import {html} from "@observablehq/htl"

list = arr => html`<ul>
  ${arr.map(v => html.fragment`<li>${v}</li>`)}
</ul>`

defaultInput = v => html`<input type="range" min="0" max="1" step = ".005" value=${v} />`

listInput = ({
  input = defaultInput,
  min = 0,
  max = 0,
  value = null,
  defaultValue = '',
} = {}) => {
  // This is a state variable that we will change as events occur on the input
  let values = value !== null ? value : new Array(Math.max(min, 1)).fill(defaultValue)
  
  // Templates
  const inputRow = (v, i) => html.fragment`<tr>
    <td onchange=${e => changeValueAt(i, e.target.value)}>${input(v, i, values)}</td>
    <td>      
    <button onclick=${e => removeRow(i)} disabled=${values.length <= min}>&times;</button>
</td>
  </tr>`
  
  const footerRow = () => html.fragment`<tr>
      <td></td>
      <td>
        <button onclick=${addRow} disabled=${values.length >= max && max !== 0}>+</button>
      </td>
  </tr>`
  
  // Rerender Helpers
  const rerenderTbody = () => {
    const tbody = output.querySelector('tbody')
    tbody.innerHTML = ''
    tbody.appendChild(html.fragment`${values.map(inputRow)}`)
  }
  
  const rerenderTfoot = () => {
    const tfoot = output.querySelector('tfoot')
    tfoot.innerHTML = ''
    tfoot.appendChild(footerRow())    
  }
  
  const rerender = () => {
    rerenderTbody()
    rerenderTfoot()
  }

  // Event Dispatcher
  const dispatchInputEvent = () => {
    output.value = values
    output.dispatchEvent(new CustomEvent('input'))
  }
  
  // Event Handlers
  const addRow = () => {
    values.push(defaultValue)
    rerender()
    dispatchInputEvent()
  }
  
  const removeRow = removeIdx => {
    values = values.filter((_, i) => i !== removeIdx)
    rerender()
    dispatchInputEvent()
  }
  
  const changeValueAt = (i, value) => {
    values[i] = value
    rerender()
    dispatchInputEvent()
  }
  
  const output = html`<table style=${{ width: 'auto' }}>
    <tbody>
      ${values.map(inputRow)}
    </tbody>
    <tfoot>
      ${footerRow()}
    </tfoot>
  </table>`
  
  output.value = values
  return output
}

```

```{=html}
<div class="slider-container">
    <div class="slider-track"></div>
    <div class="slider-pointer" data-value="50" style="left: 50%;"></div>
    <div class="slider-pointer" data-value="90" style="left: 90%;"></div>
    <div class="slider-pointer" data-value="100" style="left: 100%;"></div>
</div>
```

```{r}
pwnormal <- function(mu, tau, sigma, alpha, lambda) {
  eta <- sqrt(tau^2 + sigma^2)
  H <- length(alpha)
  alpha_f <- c(0, alpha, 1)
  lambda_f <- c(1, lambda)
  c_h <- (sigma * qnorm(1 - alpha_f) - mu) / eta
  B_h <- pnorm(c_h[-(H+2)]) - pnorm(c_h[-1])
  A <- sum(B_h * lambda_f)
  pr_h <- B_h * lambda_f / A
  function(x) {
    x_interval <- cut(x, breaks = sigma * qnorm(1 - alpha_f), include.lowest = TRUE)
    wt <- rev(lambda_f)[x_interval]
    gen_prob <- dnorm((x - mu) / eta) / eta
    wt * gen_prob / A
  }
}
```
```{ojs}
math = require("mathjs")
norm = import('https://unpkg.com/norm-dist@3.1.0/index.js?module')

lambda = Array(H+1).fill(1)

eta = math.sqrt(tau**2 + sigma**2)

```

:::: {.grid .column-page-inset}

::: {.g-col-7}

:::

::: {.g-col-5}

```{ojs}
//| panel: input

viewof alphas = listInput({
  min: 1,
  max: 10,
  value: [.025,.500],
  defaultValue: .500,
})


viewof H = Inputs.range(
  [1, 10], 
  {value: 1, step: 1, label: "Number of thresholds (H):"}
)

viewof mu = Inputs.range(
  [-2, 2], 
  {value: 0, step: 0.01, label: "Average effect size (mu):"}
)

viewof tau = Inputs.range(
  [0, 2], 
  {value: 0.10, step: 0.01, label: "Heterogeneity SD (tau):"}
)

viewof sigma = Inputs.range(
  [0, 1], 
  {value: 0.10, step: 0.01, label: "Standard error (sigma):"}
)

```
:::

::::
